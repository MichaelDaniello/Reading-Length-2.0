# source: https://rlength-dev-5d57e09ec4.herokuapp.com/readinglength-dev/dev
# timestamp: Mon Jan 14 2019 22:17:07 GMT-0700 (Mountain Standard Time)

type AggregateBook {
  count: Int!
}

type AggregateBookPreview {
  count: Int!
}

type AggregateWordCount {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  isbn10: String!
  isbn13: String
  name: String!
  author: String
  image: String
  description: String
  publishDate: DateTime
  pageCount: Int
  wordCounts: [String!]!
  related: [String!]!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  isbn10: String!
  isbn13: String
  name: String!
  author: String
  image: String
  description: String
  publishDate: DateTime
  pageCount: Int
  wordCounts: BookCreatewordCountsInput
  related: BookCreaterelatedInput
}

input BookCreaterelatedInput {
  set: [String!]
}

input BookCreatewordCountsInput {
  set: [String!]
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  isbn10_ASC
  isbn10_DESC
  isbn13_ASC
  isbn13_DESC
  name_ASC
  name_DESC
  author_ASC
  author_DESC
  image_ASC
  image_DESC
  description_ASC
  description_DESC
  publishDate_ASC
  publishDate_DESC
  pageCount_ASC
  pageCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreview implements Node {
  id: ID!
  isbn10: String!
  name: String!
  image: String
}

"""A connection to a list of items."""
type BookPreviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookPreviewEdge]!
  aggregate: AggregateBookPreview!
}

input BookPreviewCreateInput {
  isbn10: String!
  name: String!
  image: String
}

"""An edge in a connection."""
type BookPreviewEdge {
  """The item at the end of the edge."""
  node: BookPreview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookPreviewOrderByInput {
  id_ASC
  id_DESC
  isbn10_ASC
  isbn10_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviewPreviousValues {
  id: ID!
  isbn10: String!
  name: String!
  image: String
}

type BookPreviewSubscriptionPayload {
  mutation: MutationType!
  node: BookPreview
  updatedFields: [String!]
  previousValues: BookPreviewPreviousValues
}

input BookPreviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookPreviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookPreviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookPreviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookPreviewWhereInput
}

input BookPreviewUpdateInput {
  isbn10: String
  name: String
  image: String
}

input BookPreviewUpdateManyMutationInput {
  isbn10: String
  name: String
  image: String
}

input BookPreviewWhereInput {
  """Logical AND on all given filters."""
  AND: [BookPreviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookPreviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookPreviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isbn10: String

  """All values that are not equal to given value."""
  isbn10_not: String

  """All values that are contained in given list."""
  isbn10_in: [String!]

  """All values that are not contained in given list."""
  isbn10_not_in: [String!]

  """All values less than the given value."""
  isbn10_lt: String

  """All values less than or equal the given value."""
  isbn10_lte: String

  """All values greater than the given value."""
  isbn10_gt: String

  """All values greater than or equal the given value."""
  isbn10_gte: String

  """All values containing the given string."""
  isbn10_contains: String

  """All values not containing the given string."""
  isbn10_not_contains: String

  """All values starting with the given string."""
  isbn10_starts_with: String

  """All values not starting with the given string."""
  isbn10_not_starts_with: String

  """All values ending with the given string."""
  isbn10_ends_with: String

  """All values not ending with the given string."""
  isbn10_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

input BookPreviewWhereUniqueInput {
  id: ID
  isbn10: String
}

type BookPreviousValues {
  id: ID!
  isbn10: String!
  isbn13: String
  name: String!
  author: String
  image: String
  description: String
  publishDate: DateTime
  pageCount: Int
  wordCounts: [String!]!
  related: [String!]!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  isbn10: String
  isbn13: String
  name: String
  author: String
  image: String
  description: String
  publishDate: DateTime
  pageCount: Int
  wordCounts: BookUpdatewordCountsInput
  related: BookUpdaterelatedInput
}

input BookUpdateManyMutationInput {
  isbn10: String
  isbn13: String
  name: String
  author: String
  image: String
  description: String
  publishDate: DateTime
  pageCount: Int
  wordCounts: BookUpdatewordCountsInput
  related: BookUpdaterelatedInput
}

input BookUpdaterelatedInput {
  set: [String!]
}

input BookUpdatewordCountsInput {
  set: [String!]
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isbn10: String

  """All values that are not equal to given value."""
  isbn10_not: String

  """All values that are contained in given list."""
  isbn10_in: [String!]

  """All values that are not contained in given list."""
  isbn10_not_in: [String!]

  """All values less than the given value."""
  isbn10_lt: String

  """All values less than or equal the given value."""
  isbn10_lte: String

  """All values greater than the given value."""
  isbn10_gt: String

  """All values greater than or equal the given value."""
  isbn10_gte: String

  """All values containing the given string."""
  isbn10_contains: String

  """All values not containing the given string."""
  isbn10_not_contains: String

  """All values starting with the given string."""
  isbn10_starts_with: String

  """All values not starting with the given string."""
  isbn10_not_starts_with: String

  """All values ending with the given string."""
  isbn10_ends_with: String

  """All values not ending with the given string."""
  isbn10_not_ends_with: String
  isbn13: String

  """All values that are not equal to given value."""
  isbn13_not: String

  """All values that are contained in given list."""
  isbn13_in: [String!]

  """All values that are not contained in given list."""
  isbn13_not_in: [String!]

  """All values less than the given value."""
  isbn13_lt: String

  """All values less than or equal the given value."""
  isbn13_lte: String

  """All values greater than the given value."""
  isbn13_gt: String

  """All values greater than or equal the given value."""
  isbn13_gte: String

  """All values containing the given string."""
  isbn13_contains: String

  """All values not containing the given string."""
  isbn13_not_contains: String

  """All values starting with the given string."""
  isbn13_starts_with: String

  """All values not starting with the given string."""
  isbn13_not_starts_with: String

  """All values ending with the given string."""
  isbn13_ends_with: String

  """All values not ending with the given string."""
  isbn13_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
  pageCount: Int

  """All values that are not equal to given value."""
  pageCount_not: Int

  """All values that are contained in given list."""
  pageCount_in: [Int!]

  """All values that are not contained in given list."""
  pageCount_not_in: [Int!]

  """All values less than the given value."""
  pageCount_lt: Int

  """All values less than or equal the given value."""
  pageCount_lte: Int

  """All values greater than the given value."""
  pageCount_gt: Int

  """All values greater than or equal the given value."""
  pageCount_gte: Int
}

input BookWhereUniqueInput {
  id: ID
  isbn10: String
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  createWordCount(data: WordCountCreateInput!): WordCount!
  createBookPreview(data: BookPreviewCreateInput!): BookPreview!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateWordCount(data: WordCountUpdateInput!, where: WordCountWhereUniqueInput!): WordCount
  updateBookPreview(data: BookPreviewUpdateInput!, where: BookPreviewWhereUniqueInput!): BookPreview
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteWordCount(where: WordCountWhereUniqueInput!): WordCount
  deleteBookPreview(where: BookPreviewWhereUniqueInput!): BookPreview
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertWordCount(where: WordCountWhereUniqueInput!, create: WordCountCreateInput!, update: WordCountUpdateInput!): WordCount!
  upsertBookPreview(where: BookPreviewWhereUniqueInput!, create: BookPreviewCreateInput!, update: BookPreviewUpdateInput!): BookPreview!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyWordCounts(data: WordCountUpdateManyMutationInput!, where: WordCountWhereInput): BatchPayload!
  updateManyBookPreviews(data: BookPreviewUpdateManyMutationInput!, where: BookPreviewWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyWordCounts(where: WordCountWhereInput): BatchPayload!
  deleteManyBookPreviews(where: BookPreviewWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  wordCounts(where: WordCountWhereInput, orderBy: WordCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WordCount]!
  bookPreviews(where: BookPreviewWhereInput, orderBy: BookPreviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookPreview]!
  book(where: BookWhereUniqueInput!): Book
  wordCount(where: WordCountWhereUniqueInput!): WordCount
  bookPreview(where: BookPreviewWhereUniqueInput!): BookPreview
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  wordCountsConnection(where: WordCountWhereInput, orderBy: WordCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WordCountConnection!
  bookPreviewsConnection(where: BookPreviewWhereInput, orderBy: BookPreviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookPreviewConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  wordCount(where: WordCountSubscriptionWhereInput): WordCountSubscriptionPayload
  bookPreview(where: BookPreviewSubscriptionWhereInput): BookPreviewSubscriptionPayload
}

type WordCount implements Node {
  id: ID!
  isbn10: String!
  wordCount: Int!
  countAccuracy: String
  countType: String
}

"""A connection to a list of items."""
type WordCountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WordCountEdge]!
  aggregate: AggregateWordCount!
}

input WordCountCreateInput {
  isbn10: String!
  wordCount: Int!
  countAccuracy: String
  countType: String
}

"""An edge in a connection."""
type WordCountEdge {
  """The item at the end of the edge."""
  node: WordCount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WordCountOrderByInput {
  id_ASC
  id_DESC
  isbn10_ASC
  isbn10_DESC
  wordCount_ASC
  wordCount_DESC
  countAccuracy_ASC
  countAccuracy_DESC
  countType_ASC
  countType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WordCountPreviousValues {
  id: ID!
  isbn10: String!
  wordCount: Int!
  countAccuracy: String
  countType: String
}

type WordCountSubscriptionPayload {
  mutation: MutationType!
  node: WordCount
  updatedFields: [String!]
  previousValues: WordCountPreviousValues
}

input WordCountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WordCountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordCountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordCountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WordCountWhereInput
}

input WordCountUpdateInput {
  isbn10: String
  wordCount: Int
  countAccuracy: String
  countType: String
}

input WordCountUpdateManyMutationInput {
  isbn10: String
  wordCount: Int
  countAccuracy: String
  countType: String
}

input WordCountWhereInput {
  """Logical AND on all given filters."""
  AND: [WordCountWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordCountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordCountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isbn10: String

  """All values that are not equal to given value."""
  isbn10_not: String

  """All values that are contained in given list."""
  isbn10_in: [String!]

  """All values that are not contained in given list."""
  isbn10_not_in: [String!]

  """All values less than the given value."""
  isbn10_lt: String

  """All values less than or equal the given value."""
  isbn10_lte: String

  """All values greater than the given value."""
  isbn10_gt: String

  """All values greater than or equal the given value."""
  isbn10_gte: String

  """All values containing the given string."""
  isbn10_contains: String

  """All values not containing the given string."""
  isbn10_not_contains: String

  """All values starting with the given string."""
  isbn10_starts_with: String

  """All values not starting with the given string."""
  isbn10_not_starts_with: String

  """All values ending with the given string."""
  isbn10_ends_with: String

  """All values not ending with the given string."""
  isbn10_not_ends_with: String
  wordCount: Int

  """All values that are not equal to given value."""
  wordCount_not: Int

  """All values that are contained in given list."""
  wordCount_in: [Int!]

  """All values that are not contained in given list."""
  wordCount_not_in: [Int!]

  """All values less than the given value."""
  wordCount_lt: Int

  """All values less than or equal the given value."""
  wordCount_lte: Int

  """All values greater than the given value."""
  wordCount_gt: Int

  """All values greater than or equal the given value."""
  wordCount_gte: Int
  countAccuracy: String

  """All values that are not equal to given value."""
  countAccuracy_not: String

  """All values that are contained in given list."""
  countAccuracy_in: [String!]

  """All values that are not contained in given list."""
  countAccuracy_not_in: [String!]

  """All values less than the given value."""
  countAccuracy_lt: String

  """All values less than or equal the given value."""
  countAccuracy_lte: String

  """All values greater than the given value."""
  countAccuracy_gt: String

  """All values greater than or equal the given value."""
  countAccuracy_gte: String

  """All values containing the given string."""
  countAccuracy_contains: String

  """All values not containing the given string."""
  countAccuracy_not_contains: String

  """All values starting with the given string."""
  countAccuracy_starts_with: String

  """All values not starting with the given string."""
  countAccuracy_not_starts_with: String

  """All values ending with the given string."""
  countAccuracy_ends_with: String

  """All values not ending with the given string."""
  countAccuracy_not_ends_with: String
  countType: String

  """All values that are not equal to given value."""
  countType_not: String

  """All values that are contained in given list."""
  countType_in: [String!]

  """All values that are not contained in given list."""
  countType_not_in: [String!]

  """All values less than the given value."""
  countType_lt: String

  """All values less than or equal the given value."""
  countType_lte: String

  """All values greater than the given value."""
  countType_gt: String

  """All values greater than or equal the given value."""
  countType_gte: String

  """All values containing the given string."""
  countType_contains: String

  """All values not containing the given string."""
  countType_not_contains: String

  """All values starting with the given string."""
  countType_starts_with: String

  """All values not starting with the given string."""
  countType_not_starts_with: String

  """All values ending with the given string."""
  countType_ends_with: String

  """All values not ending with the given string."""
  countType_not_ends_with: String
}

input WordCountWhereUniqueInput {
  id: ID
}
